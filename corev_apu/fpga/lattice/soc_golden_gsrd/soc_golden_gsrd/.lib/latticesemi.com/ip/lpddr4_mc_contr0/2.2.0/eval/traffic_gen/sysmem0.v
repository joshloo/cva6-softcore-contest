
/*******************************************************************************
    Verilog netlist generated by IPGEN Lattice Propel (64-bit)
    1.1.2010292113
    Soft IP Version: 1.0.2
    2021 02 18 23:27:12
*******************************************************************************/
/*******************************************************************************
    Wrapper Module generated per user settings.
*******************************************************************************/
module sysmem0 #(
parameter SIM = 0
)
(
        ahbl_hclk_i, 
        ahbl_hresetn_i, 
        ahbl_s0_hsel_i, 
        ahbl_s0_hready_i, 
        ahbl_s0_haddr_i, 
        ahbl_s0_hburst_i, 
        ahbl_s0_hsize_i, 
        ahbl_s0_hmastlock_i, 
        ahbl_s0_hprot_i, 
        ahbl_s0_htrans_i, 
        ahbl_s0_hwrite_i, 
        ahbl_s0_hwdata_i, 
        ahbl_s0_hreadyout_o, 
        ahbl_s0_hresp_o, 
        ahbl_s0_hrdata_o, 
        ahbl_s1_hsel_i, 
        ahbl_s1_hready_i, 
        ahbl_s1_haddr_i, 
        ahbl_s1_hburst_i, 
        ahbl_s1_hsize_i, 
        ahbl_s1_hmastlock_i, 
        ahbl_s1_hprot_i, 
        ahbl_s1_htrans_i, 
        ahbl_s1_hwrite_i, 
        ahbl_s1_hwdata_i, 
        ahbl_s1_hreadyout_o, 
        ahbl_s1_hresp_o, 
        ahbl_s1_hrdata_o) ;
    input ahbl_hclk_i ; 
    input ahbl_hresetn_i ; 
    input ahbl_s0_hsel_i ; 
    input ahbl_s0_hready_i ; 
    input [31:0] ahbl_s0_haddr_i ; 
    input [2:0] ahbl_s0_hburst_i ; 
    input [2:0] ahbl_s0_hsize_i ; 
    input ahbl_s0_hmastlock_i ; 
    input [3:0] ahbl_s0_hprot_i ; 
    input [1:0] ahbl_s0_htrans_i ; 
    input ahbl_s0_hwrite_i ; 
    input [31:0] ahbl_s0_hwdata_i ; 
    output ahbl_s0_hreadyout_o ; 
    output ahbl_s0_hresp_o ; 
    output [31:0] ahbl_s0_hrdata_o ; 
    input ahbl_s1_hsel_i ; 
    input ahbl_s1_hready_i ; 
    input [31:0] ahbl_s1_haddr_i ; 
    input [2:0] ahbl_s1_hburst_i ; 
    input [2:0] ahbl_s1_hsize_i ; 
    input ahbl_s1_hmastlock_i ; 
    input [3:0] ahbl_s1_hprot_i ; 
    input [1:0] ahbl_s1_htrans_i ; 
    input ahbl_s1_hwrite_i ; 
    input [31:0] ahbl_s1_hwdata_i ; 
    output ahbl_s1_hreadyout_o ; 
    output ahbl_s1_hresp_o ; 
    output [31:0] ahbl_s1_hrdata_o ; 
    localparam MEM_ID = "1.0.2" ; 
    sysmem0_ipgen_lscc_sys_mem #(.FAMILY("LIFCL"), // RAM_DP_TRUE will select the correct device
	        .SIM(SIM),
            .ADDR_DEPTH(16384),
            .MEM_ID(MEM_ID),
            .MEM_SIZE("32,16384"),
            .DATA_WIDTH(32),
            .MEMORY_TYPE("EBR"),
            .PORT_COUNT(2),
            .ECC_ENABLE(0),
            .ARBITER_EN(0),
            .FIFO_STREAMER_EN(0),
            .FIFO_START_ADDR(0),
            .REGMODE_S0("noreg"),
            .RESET_MODE_S0("sync"),
            .BYTE_ENABLE_S0(1),
            .UNALIGNED_ACCESS_EN_S0(0),
            .SHIFT_DIRECTION_S0("none"),
            .S0_START_ADDR(0),
            .S0_END_ADDR(65535),
            .ACCESS_TYPE_S0("R/W"),
            .REGMODE_S1("noreg"),
            .RESET_MODE_S1("sync"),
            .BYTE_ENABLE_S1(1),
            .UNALIGNED_ACCESS_EN_S1(0),
            .SHIFT_DIRECTION_S1("none"),
            .S1_START_ADDR(0),
            .S1_END_ADDR(65535),
            .ACCESS_TYPE_S1("R/W")) lscc_sys_mem_inst (.ahbl_hclk_i(ahbl_hclk_i), 
                .ahbl_hresetn_i(ahbl_hresetn_i), 
                .ahbl_s0_hsel_i(ahbl_s0_hsel_i), 
                .ahbl_s0_hready_i(ahbl_s0_hready_i), 
                .ahbl_s0_haddr_i(ahbl_s0_haddr_i[31:0]), 
                .ahbl_s0_hburst_i(ahbl_s0_hburst_i[2:0]), 
                .ahbl_s0_hsize_i(ahbl_s0_hsize_i[2:0]), 
                .ahbl_s0_hmastlock_i(ahbl_s0_hmastlock_i), 
                .ahbl_s0_hprot_i(ahbl_s0_hprot_i[3:0]), 
                .ahbl_s0_htrans_i(ahbl_s0_htrans_i[1:0]), 
                .ahbl_s0_hwrite_i(ahbl_s0_hwrite_i), 
                .ahbl_s0_hwdata_i(ahbl_s0_hwdata_i[31:0]), 
                .ahbl_s0_hreadyout_o(ahbl_s0_hreadyout_o), 
                .ahbl_s0_hresp_o(ahbl_s0_hresp_o), 
                .ahbl_s0_hrdata_o(ahbl_s0_hrdata_o[31:0]), 
                .ahbl_s1_hsel_i(ahbl_s1_hsel_i), 
                .ahbl_s1_hready_i(ahbl_s1_hready_i), 
                .ahbl_s1_haddr_i(ahbl_s1_haddr_i[31:0]), 
                .ahbl_s1_hburst_i(ahbl_s1_hburst_i[2:0]), 
                .ahbl_s1_hsize_i(ahbl_s1_hsize_i[2:0]), 
                .ahbl_s1_hmastlock_i(ahbl_s1_hmastlock_i), 
                .ahbl_s1_hprot_i(ahbl_s1_hprot_i[3:0]), 
                .ahbl_s1_htrans_i(ahbl_s1_htrans_i[1:0]), 
                .ahbl_s1_hwrite_i(ahbl_s1_hwrite_i), 
                .ahbl_s1_hwdata_i(ahbl_s1_hwdata_i[31:0]), 
                .ahbl_s1_hreadyout_o(ahbl_s1_hreadyout_o), 
                .ahbl_s1_hresp_o(ahbl_s1_hresp_o), 
                .ahbl_s1_hrdata_o(ahbl_s1_hrdata_o[31:0]), 
                .ecc_sec_s0_o(), 
                .ecc_ded_s0_o(), 
                .ecc_sec_s1_o(), 
                .ecc_ded_s1_o(), 
                .fifo_clk_i(1'b0), 
                .fifo_wr_en_i(1'b0), 
                .fifo_interface_en_i(1'b0), 
                .fifo_wr_data_i(8'b00000000), 
                .fifo_address_rst_i(1'b0), 
                .fifo_full_o()) ; 
endmodule



// =============================================================================
// >>>>>>>>>>>>>>>>>>>>>>>>> COPYRIGHT NOTICE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
// -----------------------------------------------------------------------------
//   Copyright (c) 2017 by Lattice Semiconductor Corporation
//   ALL RIGHTS RESERVED
// -----------------------------------------------------------------------------
//
//   Permission:
//
//      Lattice SG Pte. Ltd. grants permission to use this code
//      pursuant to the terms of the Lattice Reference Design License Agreement.
//
//
//   Disclaimer:
//
//      This VHDL or Verilog source code is intended as a design reference
//      which illustrates how these types of functions can be implemented.
//      It is the user's responsibility to verify their design for
//      consistency and functionality through the use of formal
//      verification methods.  Lattice provides no warranty
//      regarding the use or functionality of this code.
//
// -----------------------------------------------------------------------------
//
//                  Lattice SG Pte. Ltd.
//                  101 Thomson Road, United Square #07-02
//                  Singapore 307591
//
//
//                  TEL: 1-800-Lattice (USA and Canada)
//                       +65-6631-2000 (Singapore)
//                       +1-503-268-8001 (other locations)
//
//                  web: http://www.latticesemi.com/
//                  email: techsupport@latticesemi.com
//
// -----------------------------------------------------------------------------
//
// =============================================================================
//                         FILE DETAILS
// Project               :
// File                  : lscc_ahblmem_arbiter.v
// Title                 :
// Dependencies          : 1.
//                       : 2.
// Description           :
// =============================================================================
//                        REVISION HISTORY
// Version               : 1.0.0
// Author(s)             :
// Mod. Date             :
// Changes Made          : Initial release.
// =============================================================================
module sysmem0_ipgen_lscc_ahblmem_arbiter #(parameter PORT_TYPE_S0 = "R/W", 
        parameter PORT_TYPE_S1 = "R/W", 
        parameter ADDR_WIDTH = 32, 
        parameter RESET_MODE = "async", 
        parameter ARBITER_EN = 0) (
    // ------------------------------------------------------------------------------
    // Input/Output Ports
    // ------------------------------------------------------------------------------
    input clk_i, 
    input rst_i, 
    // ------------------------------------------------------------------------------
    // Port S0 Signals
    // ------------------------------------------------------------------------------
    input [(ADDR_WIDTH - 1):0] addr_s0_i, 
    input mem_wr_rdn_s0_i, 
    input mem_req_s0_i, 
    output mem_wr_rdn_s0_o, 
    output mem_req_s0_o, 
    // ------------------------------------------------------------------------------
    // Port S1 Signals
    // ------------------------------------------------------------------------------
    input [(ADDR_WIDTH - 1):0] addr_s1_i, 
    input mem_wr_rdn_s1_i, 
    input mem_req_s1_i, 
    output mem_wr_rdn_s1_o, 
    output mem_req_s1_o) ;
    localparam DUAL_WRITE = (((PORT_TYPE_S0 == "R/W") && ((PORT_TYPE_S1 == "R/W") || (PORT_TYPE_S1 == "W/O"))) ? ARBITER_EN : (((PORT_TYPE_S0 == "W/O") && ((PORT_TYPE_S1 == "R/W") || (PORT_TYPE_S1 == "W/O"))) ? ARBITER_EN : 0)) ; 
    // -----------------------------------------------------------------------------
    // Generate Blocks
    // -----------------------------------------------------------------------------
    generate
        if ((DUAL_WRITE == 1)) 
            begin : dual_write
                reg mem_wr_rdn_s0_r ; 
                reg mem_wr_rdn_s1_r ; 
                reg mem_req_s1_r ; 
                reg mem_req_s0_r ; 
                assign mem_wr_rdn_s0_o = mem_wr_rdn_s0_r ; 
                assign mem_wr_rdn_s1_o = mem_wr_rdn_s1_r ; 
                assign mem_req_s0_o = mem_req_s0_r ; 
                assign mem_req_s1_o = mem_req_s1_r ; 
                always
                    @(*)
                    begin
                        if ((((((addr_s0_i == addr_s1_i) && (mem_wr_rdn_s0_i == 1'b1)) && (mem_wr_rdn_s1_i == 1'b1)) && (mem_req_s0_i == 1'b1)) && (mem_req_s1_i == 1'b1))) 
                            begin
                                mem_wr_rdn_s0_r = 1'b1 ;
                                mem_wr_rdn_s1_r = 1'b0 ;
                                mem_req_s0_r = 1'b1 ;
                                mem_req_s1_r = 1'b0 ;
                            end
                        else
                            begin
                                mem_wr_rdn_s0_r = mem_wr_rdn_s0_i ;
                                mem_wr_rdn_s1_r = mem_wr_rdn_s1_i ;
                                mem_req_s0_r = mem_req_s0_i ;
                                mem_req_s1_r = mem_req_s1_i ;
                            end
                    end
            end
        else
            begin : single_write
                assign mem_wr_rdn_s0_o = ((PORT_TYPE_S0 == "R/O") ? 1'b0 : mem_wr_rdn_s0_i) ; 
                assign mem_wr_rdn_s1_o = ((PORT_TYPE_S1 == "R/O") ? 1'b0 : mem_wr_rdn_s1_i) ; 
                assign mem_req_s0_o = mem_req_s0_i ; 
                assign mem_req_s1_o = mem_req_s1_i ; 
            end
    endgenerate
endmodule



`timescale 1ns/1ps
// =============================================================================
// >>>>>>>>>>>>>>>>>>>>>>>>> COPYRIGHT NOTICE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
// -----------------------------------------------------------------------------
//   Copyright (c) 2017 by Lattice Semiconductor Corporation
//   ALL RIGHTS RESERVED
// -----------------------------------------------------------------------------
//
//   Permission:
//
//      Lattice SG Pte. Ltd. grants permission to use this code
//      pursuant to the terms of the Lattice Reference Design License Agreement.
//
//
//   Disclaimer:
//
//      This VHDL or Verilog source code is intended as a design reference
//      which illustrates how these types of functions can be implemented.
//      It is the user's responsibility to verify their design for
//      consistency and functionality through the use of formal
//      verification methods.  Lattice provides no warranty
//      regarding the use or functionality of this code.
//
// -----------------------------------------------------------------------------
//
//                  Lattice SG Pte. Ltd.
//                  101 Thomson Road, United Square #07-02
//                  Singapore 307591
//
//
//                  TEL: 1-800-Lattice (USA and Canada)
//                       +65-6631-2000 (Singapore)
//                       +1-503-268-8001 (other locations)
//
//                  web: http://www.latticesemi.com/
//                  email: techsupport@latticesemi.com
//
// -----------------------------------------------------------------------------
//
// =============================================================================
//                         FILE DETAILS
// Project               :
// File                  : lscc_ahblmem_slave.v
// Title                 :
// Dependencies          : 1.
//                       : 2.
// Description           :
// =============================================================================
//                        REVISION HISTORY
// Version               : 1.0.0
// Author(s)             :
// Mod. Date             :
// Changes Made          : Initial release.
// =============================================================================
module sysmem0_ipgen_lscc_ahblmem_slave #(parameter DATA_WIDTH = 32, 
        parameter ADDR_DEPTH = 16384, 
        parameter ADDR_WIDTH = clog2(ADDR_DEPTH), 
        parameter REG_MODE = "noreg", 
        parameter BYTE_ENABLE = 1, 
        parameter START_ADDR = 0, 
        parameter END_ADDR = (((ADDR_DEPTH * DATA_WIDTH) / 8) - 1), 
        parameter PORT_TYPE = "R/W", 
        parameter RESET_MODE = "sync", 
        parameter BYTE_WIDTH = (DATA_WIDTH / 8), 
        parameter UNALIGNED_EN = 0, 
        parameter UNALIGNED_DIR = "none", 
        parameter MEMORY_TYPE = "EBR") (
    input ahbl_hclk_i, 
    input ahbl_hresetn_i, 
    // ------------------------   
    // AHB-Lite Interface         
    // ------------------------   
    input ahbl_hsel_i, 
    input ahbl_hready_i, 
    input [31:0] ahbl_haddr_i, 
    input [2:0] ahbl_hburst_i, 
    input [2:0] ahbl_hsize_i, 
    input ahbl_hmastlock_i,  // currently not used
    input [3:0] ahbl_hprot_i,  // currently not used
    input [1:0] ahbl_htrans_i, 
    input ahbl_hwrite_i, 
    input [(DATA_WIDTH - 1):0] ahbl_hwdata_i, 
    output ahbl_hreadyout_o, 
    output ahbl_hresp_o, 
    output [(DATA_WIDTH - 1):0] ahbl_hrdata_o, 
    // ------------------------
    // Memory Interface           
    // ------------------------
    input [(DATA_WIDTH - 1):0] mem_rdata_i, 
    input mem_error_i, 
    output mem_request_o, 
    output mem_wr_rdn_o, 
    output [(ADDR_WIDTH - 1):0] mem_addr_o, 
    output [(DATA_WIDTH - 1):0] mem_wdata_o, 
    output [(BYTE_WIDTH - 1):0] mem_byte_en_o) ;
    // ------------------------------------------------------------------------------
    // Local Parameters
    // ------------------------------------------------------------------------------
    // AHBL_MEM_STATE
    localparam ERR_STATE_SIZE = 3 ; 
    localparam [(ERR_STATE_SIZE - 1):0] ERR_NORMAL_MODE = 3'b001 ; // 8'h01
    localparam [(ERR_STATE_SIZE - 1):0] ERR_T1 = 3'b010 ; // 8'h02
    localparam [(ERR_STATE_SIZE - 1):0] ERR_T2 = 3'b100 ; // 8'h04
    // AHBL_MEM_STATE
    localparam STATE_SIZE = 12 ; 
    localparam [(STATE_SIZE - 1):0] SM_IDLE = 12'b000000000001 ; //32'h0001
    localparam [(STATE_SIZE - 1):0] SM_WRITE_NSEQ = 12'b000000000010 ; //32'h0002
    localparam [(STATE_SIZE - 1):0] SM_WRITE_SEQ = 12'b000000000100 ; //32'h0004
    localparam [(STATE_SIZE - 1):0] SM_READ_NSEQ = 12'b000000001000 ; //32'h0008
    localparam [(STATE_SIZE - 1):0] SM_READ_SEQ = 12'b000000010000 ; //32'h0010
    localparam [(STATE_SIZE - 1):0] SM_READ_NSEQ_WAIT = 12'b000000100000 ; //32'h0020
    localparam [(STATE_SIZE - 1):0] SM_READ_NSEQ_RESULT = 12'b000001000000 ; //32'h0040
    localparam [(STATE_SIZE - 1):0] SM_READ_SEQ_INIT = 12'b000010000000 ; //32'h0080
    localparam [(STATE_SIZE - 1):0] SM_READ_SEQ_BURST = 12'b000100000000 ; //32'h0100
    localparam [(STATE_SIZE - 1):0] SM_WRITE_TO_READ = 12'b001000000000 ; //32'h0200
    localparam [(STATE_SIZE - 1):0] SM_BUSY = 12'b010000000000 ; //32'h0400
    localparam [(STATE_SIZE - 1):0] SM_ERROR = 12'b100000000000 ; //32'h0800
    // HBURST commands                         
    localparam [2:0] SINGLE = 3'b000 ; 
    localparam [2:0] INCR = 3'b001 ; 
    localparam [2:0] WRAP4 = 3'b010 ; 
    localparam [2:0] INCR4 = 3'b011 ; 
    localparam [2:0] WRAP8 = 3'b100 ; 
    localparam [2:0] INCR8 = 3'b101 ; 
    localparam [2:0] WRAP16 = 3'b110 ; 
    localparam [2:0] INCR16 = 3'b111 ; 
    // HTRANS commands
    localparam [1:0] IDLE = 2'b00 ; 
    localparam [1:0] BUSY = 2'b01 ; 
    localparam [1:0] NSEQ = 2'b10 ; 
    localparam [1:0] SEQ = 2'b11 ; 
    // HSIZE transactions
    localparam [2:0] X32_WORD = 3'b010 ; 
    localparam [2:0] X16_HALFWORD = 3'b001 ; 
    localparam [2:0] X8_BYTE = 3'b000 ; 
    // Default Values
    localparam [2:0] HDATA_SIZE_DEF = ((DATA_WIDTH == 32) ? X32_WORD : ((DATA_WIDTH == 16) ? X16_HALFWORD : X8_BYTE)) ; 
    localparam BYTE_EN_POL = ((MEMORY_TYPE == "LRAM") ? 1'b0 : 1'b1) ; 
    localparam BYTE_EN_NEG = ((MEMORY_TYPE == "LRAM") ? 1'b1 : 1'b0) ; 
    localparam MEM_END_ADDR_LIMIT = ((END_ADDR + 1) / 1024) ; 
    // ------------------------------------------------------------------------------
    // Wire and Register Declarations
    // ------------------------------------------------------------------------------
    // Select Signal
    wire slv_sel = (ahbl_hsel_i & (ahbl_htrans_i != IDLE)) ; 
    // System State Machine   
    reg [(STATE_SIZE - 1):0] bridge_sm_nxt_r = SM_IDLE ; 
    reg [(STATE_SIZE - 1):0] bridge_sm_r = SM_IDLE ; 
    reg [(STATE_SIZE - 1):0] bridge_sm_pop_r = SM_IDLE ; 
    reg [(ERR_STATE_SIZE - 1):0] err_sm_r = ERR_NORMAL_MODE ; 
    reg [(ERR_STATE_SIZE - 1):0] err_sm_nxt_r = ERR_NORMAL_MODE ; 
    // Sampled Signals (1st sample)
    reg ahbl_hsel_p_r = 1'b0 ; 
    reg [1:0] ahbl_htrans_p_r = IDLE ; 
    reg [2:0] ahbl_hsize_p_r = HDATA_SIZE_DEF ; 
    reg [31:0] ahbl_haddr_p_r = START_ADDR ; 
    // Sampled Signals (2nd sample)
    reg ahbl_hsel_p2_r = 1'b0 ; 
    reg [1:0] ahbl_htrans_p2_r = IDLE ; 
    // Memory Address and Control Assignments
    reg [31:0] rd_burst_r = START_ADDR ; 
    reg [31:0] rd_prev_r = START_ADDR ; 
    wire [31:0] rd_addr_w = ((REG_MODE == "noreg") ? ((bridge_sm_r == SM_WRITE_TO_READ) ? rd_prev_r : (ahbl_haddr_i + START_ADDR)) : ((bridge_sm_r == SM_READ_SEQ_BURST) ? ((ahbl_htrans_i == NSEQ) ? (ahbl_haddr_i + START_ADDR) : rd_burst_r) : ((bridge_sm_r == SM_WRITE_TO_READ) ? rd_prev_r : (ahbl_haddr_i + START_ADDR)))) ; 
    wire rd_mem_req_w = ((ahbl_hsel_i | ahbl_hsel_p_r) | ahbl_hsel_p2_r) ; 
    wire rd_mem_en_w = ((((((ahbl_htrans_i == NSEQ) | (ahbl_htrans_i == SEQ)) | (ahbl_htrans_p_r == NSEQ)) | (ahbl_htrans_p_r == SEQ)) | (ahbl_htrans_p2_r == NSEQ)) | (ahbl_htrans_p2_r == SEQ)) ; 
    reg [31:0] wr_addr_r = START_ADDR ; 
    wire [31:0] wr_addr_w = wr_addr_r ; 
    wire wr_mem_req_w = ahbl_hsel_p_r ; 
    wire wr_mem_en_w = ((ahbl_htrans_p_r == NSEQ) | (ahbl_htrans_p_r == SEQ)) ; 
    wire [2:0] addr_add_w = ((ahbl_hsize_i == X32_WORD) ? 3'b100 : ((ahbl_hsize_i == X16_HALFWORD) ? 3'b010 : 3'b001)) ; 
    wire [31:0] mem_addr_w = (((bridge_sm_r == SM_WRITE_NSEQ) || (bridge_sm_r == SM_WRITE_SEQ)) ? wr_addr_w : rd_addr_w) ; 
    // Output Control Signals
    wire [3:0] unaligned_ctrl_w = ((UNALIGNED_EN == 1) ? ((UNALIGNED_DIR == "right") ? {{2'b00},
                {rd_addr_w[1:0]}} : ((UNALIGNED_DIR == "left") ? {{2'b01},
                {rd_addr_w[1:0]}} : 4'b0000)) : ((MEMORY_TYPE == "EBR") ? 4'b1111 : 4'b0000)) ; 
    wire [(BYTE_WIDTH - 1):0] ben_w = ((BYTE_ENABLE == 1) ? ((DATA_WIDTH == 32) ? ((ahbl_hsize_p_r == X32_WORD) ? {4{BYTE_EN_POL}} : ((ahbl_hsize_p_r == X16_HALFWORD) ? ((wr_addr_w[1] == 1) ? {{2{BYTE_EN_POL}},
                {2{BYTE_EN_NEG}}} : {{2{BYTE_EN_NEG}},
                {2{BYTE_EN_POL}}}) : ((wr_addr_w[1:0] == 3) ? {/*(ahbl_hsize_p_r == X8_BYTE) ? */ BYTE_EN_POL,
                {3{BYTE_EN_NEG}}} : ((wr_addr_w[1:0] == 2) ? {BYTE_EN_NEG,
                BYTE_EN_POL,
                {2{BYTE_EN_NEG}}} : ((wr_addr_w[1:0] == 1) ? {{2{BYTE_EN_NEG}},
                BYTE_EN_POL,
                BYTE_EN_NEG} : {{3{BYTE_EN_NEG}},
                BYTE_EN_POL}))))) : ((DATA_WIDTH == 16) ? ((ahbl_hsize_p_r == X16_HALFWORD) ? {2{BYTE_EN_POL}} : ((wr_addr_w[1] == 1) ? {/*(ahbl_hsize_p_r == X8_BYTE) ? */ BYTE_EN_POL,
                BYTE_EN_NEG} : {BYTE_EN_NEG,
                BYTE_EN_POL})) : {BYTE_WIDTH{BYTE_EN_POL}})) : {BYTE_WIDTH{BYTE_EN_POL}}) ; 
    reg ahbl_hreadyout_ext_r = 1'b1 ; 
    reg ahbl_hreadyout_r = 1'b1 ; 
    reg ahbl_hresp_r = 1'b0 ; 
    // Next Register Signals
    reg ahbl_hreadyout_nxt_r = 1'b1 ; 
    wire ahbl_hresp_nxt_r = ((err_sm_nxt_r == ERR_NORMAL_MODE) ? 1'b0 : 1'b1) ; 
    reg ahbl_hsel_p_nxt_r = 1'b0 ; 
    // Error Signals
    wire AHBL_unaligned_w = ((DATA_WIDTH == 32) ? ((ahbl_hsize_i == X32_WORD) ? ((ahbl_haddr_i[1:0] == 2'b00) ? 1'b1 : (~slv_sel)) : ((ahbl_hsize_i == X16_HALFWORD) ? ((ahbl_haddr_i[0] == 1'b0) ? 1'b1 : (~slv_sel)) : 1'b1)) : ((DATA_WIDTH == 16) ? ((ahbl_hsize_i == X16_HALFWORD) ? ((ahbl_haddr_i[0] == 1'b0) ? 1'b1 : (~slv_sel)) : 1'b1) : 1'b1)) ; 
    wire AHBL_overflow_w ; 
    wire AHBL_misaccess_w = ((PORT_TYPE == "W/O") ? ((ahbl_hwrite_i == 1'b1) ? 1'b1 : (~slv_sel)) : ((PORT_TYPE == "R/O") ? ((ahbl_hwrite_i == 1'b0) ? 1'b1 : (~slv_sel)) : 1'b1)) ; 
    wire AHBL_overwidth_w = ((DATA_WIDTH == 32) ? 1'b1 : ((DATA_WIDTH == 16) ? ((ahbl_hsize_i == X32_WORD) ? (~slv_sel) : 1'b1) : ((ahbl_hsize_i == X8_BYTE) ? 1'b1 : (~slv_sel)))) ; 
    wire AHBL_ok_w = (((AHBL_unaligned_w & AHBL_overflow_w) & AHBL_misaccess_w) & AHBL_overwidth_w) ; 
    // Output Assignments
    assign ahbl_hreadyout_o = ahbl_hreadyout_ext_r ; 
    assign ahbl_hresp_o = ahbl_hresp_r ; 
    assign ahbl_hrdata_o = mem_rdata_i ; 
    assign mem_wdata_o = ahbl_hwdata_i ; 
    assign mem_addr_o = ((DATA_WIDTH == 32) ? mem_addr_w[(ADDR_WIDTH + 1):2] : ((DATA_WIDTH == 16) ? mem_addr_w[ADDR_WIDTH:1] : mem_addr_w[(ADDR_WIDTH - 1):0])) ; 
    assign mem_byte_en_o = ((MEMORY_TYPE == "LRAM") ? (((bridge_sm_r == SM_WRITE_NSEQ) || (bridge_sm_r == SM_WRITE_SEQ)) ? ben_w : unaligned_ctrl_w) : ben_w) ; 
    assign mem_request_o = ((err_sm_r == ERR_NORMAL_MODE) ? ((bridge_sm_r != SM_IDLE) || ((ahbl_hsel_i == 1'b1) && (ahbl_htrans_i == NSEQ))) : 1'b0) ; 
    assign mem_wr_rdn_o = ((bridge_sm_r == SM_WRITE_NSEQ) || (bridge_sm_r == SM_WRITE_SEQ)) ; 
    // ------------------------------------------------------------------------------
    // Initialize Registers for Simulation
    // ------------------------------------------------------------------------------
    // ------------------------------------------------------------------------------
    // Combinational Logic
    // ------------------------------------------------------------------------------
    generate
        if ((ADDR_WIDTH <= 10)) 
            begin : genblk1
                assign AHBL_overflow_w = 1'b1 ; 
            end
        else
            begin : genblk1
                assign AHBL_overflow_w = ((ahbl_haddr_i[31:10] < MEM_END_ADDR_LIMIT) | (~(ahbl_hreadyout_r & slv_sel))) ; 
            end
        always
            @(*)
            begin
                case (bridge_sm_r)
                SM_ERROR : 
                    bridge_sm_pop_r = SM_IDLE ;
                default : 
                    bridge_sm_pop_r = bridge_sm_r ;
                endcase 
            end
        if ((REG_MODE == "noreg")) 
            begin : _nreg
                always
                    @(*)
                    begin
                        bridge_sm_nxt_r = bridge_sm_r ;
                        case (bridge_sm_r)
                        SM_IDLE : 
                            begin
                                if (((ahbl_hsel_i & (ahbl_htrans_i == NSEQ)) & ahbl_hready_i)) 
                                    begin
                                        bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_READ_NSEQ) ;
                                    end
                                else
                                    begin
                                        bridge_sm_nxt_r = SM_IDLE ;
                                    end
                            end
                        SM_WRITE_NSEQ : 
                            begin
                                if (ahbl_hsel_i) 
                                    begin
                                        case (ahbl_htrans_i)
                                        NSEQ : 
                                            bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_WRITE_TO_READ) ;
                                        SEQ : 
                                            bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_SEQ : SM_WRITE_TO_READ) ;
                                        IDLE : 
                                            bridge_sm_nxt_r = SM_IDLE ;
                                        BUSY : 
                                            bridge_sm_nxt_r = SM_BUSY ;
                                        endcase 
                                    end
                                else
                                    begin
                                        bridge_sm_nxt_r = SM_IDLE ;
                                    end
                            end
                        SM_WRITE_SEQ : 
                            begin
                                if (ahbl_hsel_i) 
                                    begin
                                        case (ahbl_htrans_i)
                                        NSEQ : 
                                            bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_WRITE_TO_READ) ;
                                        SEQ : 
                                            bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_SEQ : SM_WRITE_TO_READ) ;
                                        IDLE : 
                                            bridge_sm_nxt_r = SM_IDLE ;
                                        BUSY : 
                                            bridge_sm_nxt_r = SM_BUSY ;
                                        endcase 
                                    end
                                else
                                    begin
                                        bridge_sm_nxt_r = SM_IDLE ;
                                    end
                            end
                        SM_WRITE_TO_READ : 
                            begin
                                case (ahbl_htrans_i)
                                NSEQ : 
                                    bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_READ_NSEQ) ;
                                SEQ : 
                                    bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_SEQ : SM_READ_SEQ) ;
                                IDLE : 
                                    bridge_sm_nxt_r = SM_IDLE ;
                                BUSY : 
                                    bridge_sm_nxt_r = SM_BUSY ;
                                endcase 
                            end
                        SM_READ_NSEQ : 
                            begin
                                if (ahbl_hsel_i) 
                                    begin
                                        case (ahbl_htrans_i)
                                        NSEQ : 
                                            bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_READ_NSEQ) ;
                                        SEQ : 
                                            bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_SEQ : SM_READ_SEQ) ;
                                        IDLE : 
                                            bridge_sm_nxt_r = SM_IDLE ;
                                        BUSY : 
                                            bridge_sm_nxt_r = SM_BUSY ;
                                        endcase 
                                    end
                                else
                                    begin
                                        bridge_sm_nxt_r = SM_IDLE ;
                                    end
                            end
                        SM_READ_SEQ : 
                            begin
                                if (ahbl_hsel_i) 
                                    begin
                                        case (ahbl_htrans_i)
                                        NSEQ : 
                                            bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_READ_NSEQ) ;
                                        SEQ : 
                                            bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_SEQ : SM_READ_SEQ) ;
                                        IDLE : 
                                            bridge_sm_nxt_r = SM_IDLE ;
                                        BUSY : 
                                            bridge_sm_nxt_r = SM_BUSY ;
                                        endcase 
                                    end
                                else
                                    begin
                                        bridge_sm_nxt_r = SM_IDLE ;
                                    end
                            end
                        SM_BUSY : 
                            begin
                                if (ahbl_hsel_i) 
                                    begin
                                        case (ahbl_htrans_i)
                                        NSEQ : 
                                            bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_READ_NSEQ) ;
                                        SEQ : 
                                            bridge_sm_nxt_r = bridge_sm_pop_r ;
                                        IDLE : 
                                            bridge_sm_nxt_r = SM_IDLE ;
                                        BUSY : 
                                            bridge_sm_nxt_r = SM_BUSY ;
                                        endcase 
                                    end
                                else
                                    begin
                                        bridge_sm_nxt_r = SM_BUSY ;
                                    end
                            end
                        default : 
                            bridge_sm_nxt_r = SM_IDLE ;
                        endcase 
                    end
            end
        else
            begin : _reg
                always
                    @(*)
                    begin
                        bridge_sm_nxt_r = bridge_sm_r ;
                        case (bridge_sm_r)
                        SM_IDLE : 
                            begin
                                if (((ahbl_hsel_i & (ahbl_htrans_i == NSEQ)) & ahbl_hready_i)) 
                                    begin
                                        bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_READ_NSEQ_WAIT) ;
                                    end
                                else
                                    begin
                                        bridge_sm_nxt_r = SM_IDLE ;
                                    end
                            end
                        SM_WRITE_NSEQ : 
                            begin
                                if (ahbl_hsel_i) 
                                    begin
                                        case (ahbl_htrans_i)
                                        NSEQ : 
                                            bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_WRITE_TO_READ) ;
                                        SEQ : 
                                            bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_SEQ : SM_WRITE_TO_READ) ;
                                        IDLE : 
                                            bridge_sm_nxt_r = SM_IDLE ;
                                        BUSY : 
                                            bridge_sm_nxt_r = SM_BUSY ;
                                        endcase 
                                    end
                                else
                                    begin
                                        bridge_sm_nxt_r = SM_IDLE ;
                                    end
                            end
                        SM_WRITE_SEQ : 
                            begin
                                if (ahbl_hsel_i) 
                                    begin
                                        case (ahbl_htrans_i)
                                        NSEQ : 
                                            bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_WRITE_TO_READ) ;
                                        SEQ : 
                                            bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_SEQ : SM_WRITE_TO_READ) ;
                                        IDLE : 
                                            bridge_sm_nxt_r = SM_IDLE ;
                                        BUSY : 
                                            bridge_sm_nxt_r = SM_BUSY ;
                                        endcase 
                                    end
                                else
                                    begin
                                        bridge_sm_nxt_r = SM_IDLE ;
                                    end
                            end
                        SM_WRITE_TO_READ : 
                            begin
                                bridge_sm_nxt_r = SM_READ_NSEQ_WAIT ;
                            end
                        SM_READ_NSEQ_WAIT : 
                            begin
                                case (ahbl_htrans_i)
                                NSEQ : 
                                    bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_READ_NSEQ_RESULT) ;
                                SEQ : 
                                    begin
                                        case (ahbl_hburst_i)
                                        SINGLE : 
                                            bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_READ_SEQ_BURST) ;
                                        INCR : 
                                            bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_READ_SEQ_BURST) ;
                                        INCR8 : 
                                            bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_READ_SEQ_BURST) ;
                                        default : 
                                            bridge_sm_nxt_r = SM_READ_SEQ_INIT ;
                                        endcase 
                                    end
                                IDLE : 
                                    bridge_sm_nxt_r = SM_IDLE ;
                                BUSY : 
                                    bridge_sm_nxt_r = SM_BUSY ;
                                endcase 
                            end
                        SM_READ_NSEQ_RESULT : 
                            begin
                                if (ahbl_hsel_i) 
                                    begin
                                        case (ahbl_htrans_i)
                                        NSEQ : 
                                            bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_READ_NSEQ_WAIT) ;
                                        SEQ : 
                                            begin
                                                case (ahbl_hburst_i)
                                                SINGLE : 
                                                    bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_READ_SEQ_INIT) ;
                                                INCR : 
                                                    bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_READ_SEQ_INIT) ;
                                                INCR8 : 
                                                    bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_READ_SEQ_BURST) ;
                                                default : 
                                                    bridge_sm_nxt_r = SM_READ_SEQ_INIT ;
                                                endcase 
                                            end
                                        IDLE : 
                                            bridge_sm_nxt_r = SM_IDLE ;
                                        BUSY : 
                                            bridge_sm_nxt_r = SM_BUSY ;
                                        endcase 
                                    end
                                else
                                    begin
                                        bridge_sm_nxt_r = SM_IDLE ;
                                    end
                            end
                        SM_READ_SEQ_INIT : 
                            begin
                                case (ahbl_htrans_i)
                                NSEQ : 
                                    bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_READ_NSEQ_RESULT) ;
                                SEQ : 
                                    begin
                                        case (ahbl_hburst_i)
                                        SINGLE : 
                                            bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_READ_SEQ_BURST) ;
                                        INCR : 
                                            bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_READ_SEQ_BURST) ;
                                        INCR8 : 
                                            bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_READ_SEQ_BURST) ;
                                        default : 
                                            bridge_sm_nxt_r = SM_IDLE ;
                                        endcase 
                                    end
                                IDLE : 
                                    bridge_sm_nxt_r = SM_IDLE ;
                                BUSY : 
                                    bridge_sm_nxt_r = SM_BUSY ;
                                endcase 
                            end
                        SM_READ_SEQ_BURST : 
                            begin
                                if (ahbl_hsel_i) 
                                    begin
                                        case (ahbl_htrans_i)
                                        NSEQ : 
                                            bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_READ_NSEQ_WAIT) ;
                                        SEQ : 
                                            begin
                                                case (ahbl_hburst_i)
                                                SINGLE : 
                                                    bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_READ_SEQ_INIT) ;
                                                INCR : 
                                                    bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_READ_SEQ_BURST) ;
                                                INCR8 : 
                                                    bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_READ_SEQ_BURST) ;
                                                default : 
                                                    bridge_sm_nxt_r = SM_READ_SEQ_INIT ;
                                                endcase 
                                            end
                                        IDLE : 
                                            bridge_sm_nxt_r = SM_IDLE ;
                                        BUSY : 
                                            bridge_sm_nxt_r = SM_BUSY ;
                                        endcase 
                                    end
                                else
                                    begin
                                        bridge_sm_nxt_r = SM_IDLE ;
                                    end
                            end
                        SM_BUSY : 
                            begin
                                case (ahbl_htrans_i)
                                NSEQ : 
                                    bridge_sm_nxt_r = ((ahbl_hwrite_i == 1'b1) ? SM_WRITE_NSEQ : SM_READ_NSEQ_WAIT) ;
                                SEQ : 
                                    bridge_sm_nxt_r = bridge_sm_pop_r ;
                                IDLE : 
                                    bridge_sm_nxt_r = SM_IDLE ;
                                BUSY : 
                                    bridge_sm_nxt_r = SM_BUSY ;
                                endcase 
                            end
                        default : 
                            bridge_sm_nxt_r = SM_IDLE ;
                        endcase 
                    end
            end
    endgenerate
    always
        @(*)
        begin
            err_sm_nxt_r = err_sm_r ;
            case (err_sm_r)
            ERR_NORMAL_MODE : 
                err_sm_nxt_r = ((AHBL_ok_w == 1'b0) ? ERR_T1 : ERR_NORMAL_MODE) ;
            ERR_T1 : 
                err_sm_nxt_r = ERR_T2 ;
            ERR_T2 : 
                err_sm_nxt_r = ERR_NORMAL_MODE ;
            endcase 
        end
    always
        @(*)
        begin
            ahbl_hreadyout_nxt_r = ahbl_hreadyout_r ;
            case (err_sm_nxt_r)
            ERR_NORMAL_MODE : 
                ahbl_hreadyout_nxt_r = (~(((bridge_sm_nxt_r == SM_WRITE_TO_READ) | (bridge_sm_nxt_r == SM_READ_NSEQ_WAIT)) | (bridge_sm_nxt_r == SM_READ_SEQ_INIT))) ;
            ERR_T1 : 
                ahbl_hreadyout_nxt_r = 1'b0 ;
            ERR_T2 : 
                ahbl_hreadyout_nxt_r = 1'b1 ;
            endcase 
        end
    // ------------------------------------------------------------------------------
    // Sequential Logic
    // ------------------------------------------------------------------------------
    if ((RESET_MODE == "sync")) 
        begin : genblk3
            // Register for AHB-L interface (1st sample)
            always
                @(posedge ahbl_hclk_i)
                begin
                    if ((ahbl_hresetn_i == 1'b0)) 
                        begin
                            ahbl_hsel_p_r <=  1'b0 ;
                            ahbl_htrans_p_r <=  IDLE ;
                            ahbl_hsize_p_r <=  HDATA_SIZE_DEF ;
                            ahbl_haddr_p_r <=  START_ADDR ;
                        end
                    else
                        begin
                            ahbl_htrans_p_r <=  ahbl_htrans_i ;
                            ahbl_hsize_p_r <=  ahbl_hsize_i ;
                            ahbl_haddr_p_r <=  ahbl_haddr_i ;
                            ahbl_hsel_p_r <=  ahbl_hsel_i ;
                        end
                end
            if ((REG_MODE == "reg")) 
                begin : genblk1
                    always
                        @(posedge ahbl_hclk_i)
                        begin
                            if ((ahbl_hresetn_i == 1'b0)) 
                                begin
                                    ahbl_hsel_p2_r <=  1'b0 ;
                                    ahbl_htrans_p2_r <=  IDLE ;
                                end
                            else
                                begin
                                    ahbl_htrans_p2_r <=  ahbl_htrans_p_r ;
                                    ahbl_hsel_p2_r <=  ahbl_hsel_p_r ;
                                end
                        end
                end
            // Address Registers
            always
                @(posedge ahbl_hclk_i)
                begin
                    if ((ahbl_hresetn_i == 1'b0)) 
                        begin
                            rd_prev_r <=  START_ADDR ;
                        end
                    else
                        begin
                            rd_prev_r <=  (ahbl_haddr_i + START_ADDR) ;
                        end
                end
            if ((REG_MODE == "reg")) 
                begin : genblk2
                    always
                        @(posedge ahbl_hclk_i)
                        begin
                            if ((ahbl_hresetn_i == 1'b0)) 
                                begin
                                    rd_burst_r <=  START_ADDR ;
                                end
                            else
                                begin
                                    rd_burst_r <=  (rd_addr_w + addr_add_w) ;
                                end
                        end
                end
            always
                @(posedge ahbl_hclk_i)
                begin
                    if ((ahbl_hresetn_i == 1'b0)) 
                        begin
                            wr_addr_r <=  START_ADDR ;
                        end
                    else
                        begin
                            wr_addr_r <=  (ahbl_haddr_i + START_ADDR) ;
                        end
                end
            // Slave State Machine & Error Generator
            always
                @(posedge ahbl_hclk_i)
                begin
                    if ((ahbl_hresetn_i == 1'b0)) 
                        begin
                            bridge_sm_r <=  SM_IDLE ;
                        end
                    else
                        begin
                            bridge_sm_r <=  bridge_sm_nxt_r ;
                        end
                end
            always
                @(posedge ahbl_hclk_i)
                begin
                    if ((ahbl_hresetn_i == 1'b0)) 
                        begin
                            err_sm_r <=  ERR_NORMAL_MODE ;
                        end
                    else
                        begin
                            err_sm_r <=  err_sm_nxt_r ;
                        end
                end
            // HREADY signal 
            always
                @(posedge ahbl_hclk_i)
                begin
                    if ((ahbl_hresetn_i == 1'b0)) 
                        begin
                            ahbl_hreadyout_r <=  1'b1 ;
                            ahbl_hreadyout_ext_r <=  1'b1 ;
                        end
                    else
                        begin
                            ahbl_hreadyout_r <=  ahbl_hreadyout_nxt_r ;
                            ahbl_hreadyout_ext_r <=  ahbl_hreadyout_nxt_r ;
                        end
                end
            // HRESP signal 
            always
                @(posedge ahbl_hclk_i)
                begin
                    if ((ahbl_hresetn_i == 1'b0)) 
                        begin
                            ahbl_hresp_r <=  1'b0 ;
                        end
                    else
                        begin
                            ahbl_hresp_r <=  ahbl_hresp_nxt_r ;
                        end
                end
        end
    else
        begin : genblk3
            // Register for AHB-L interface (1st sample)
            always
                @(posedge ahbl_hclk_i or 
                    negedge ahbl_hresetn_i)
                begin
                    if ((ahbl_hresetn_i == 1'b0)) 
                        begin
                            ahbl_hsel_p_r <=  1'b0 ;
                            ahbl_htrans_p_r <=  IDLE ;
                            ahbl_hsize_p_r <=  HDATA_SIZE_DEF ;
                            ahbl_haddr_p_r <=  START_ADDR ;
                        end
                    else
                        begin
                            ahbl_htrans_p_r <=  ahbl_htrans_i ;
                            ahbl_hsize_p_r <=  ahbl_hsize_i ;
                            ahbl_haddr_p_r <=  ahbl_haddr_i ;
                            ahbl_hsel_p_r <=  ahbl_hsel_i ;
                        end
                end
            if ((REG_MODE == "reg")) 
                begin : genblk1
                    always
                        @(posedge ahbl_hclk_i or 
                            negedge ahbl_hresetn_i)
                        begin
                            if ((ahbl_hresetn_i == 1'b0)) 
                                begin
                                    ahbl_hsel_p2_r <=  1'b0 ;
                                    ahbl_htrans_p2_r <=  IDLE ;
                                end
                            else
                                begin
                                    ahbl_htrans_p2_r <=  ahbl_htrans_p_r ;
                                    ahbl_hsel_p2_r <=  ahbl_hsel_p_r ;
                                end
                        end
                end
            // Address Registers
            always
                @(posedge ahbl_hclk_i or 
                    negedge ahbl_hresetn_i)
                begin
                    if ((ahbl_hresetn_i == 1'b0)) 
                        begin
                            rd_prev_r <=  START_ADDR ;
                        end
                    else
                        begin
                            rd_prev_r <=  (ahbl_haddr_i + START_ADDR) ;
                        end
                end
            if ((REG_MODE == "reg")) 
                begin : genblk2
                    always
                        @(posedge ahbl_hclk_i or 
                            negedge ahbl_hresetn_i)
                        begin
                            if ((ahbl_hresetn_i == 1'b0)) 
                                begin
                                    rd_burst_r <=  START_ADDR ;
                                end
                            else
                                begin
                                    rd_burst_r <=  (rd_addr_w + addr_add_w) ;
                                end
                        end
                end
            always
                @(posedge ahbl_hclk_i or 
                    negedge ahbl_hresetn_i)
                begin
                    if ((ahbl_hresetn_i == 1'b0)) 
                        begin
                            wr_addr_r <=  START_ADDR ;
                        end
                    else
                        begin
                            wr_addr_r <=  (ahbl_haddr_i + START_ADDR) ;
                        end
                end
            // Slave State Machine & Error Generator
            always
                @(posedge ahbl_hclk_i or 
                    negedge ahbl_hresetn_i)
                begin
                    if ((ahbl_hresetn_i == 1'b0)) 
                        begin
                            bridge_sm_r <=  SM_IDLE ;
                        end
                    else
                        begin
                            bridge_sm_r <=  bridge_sm_nxt_r ;
                        end
                end
            always
                @(posedge ahbl_hclk_i or 
                    negedge ahbl_hresetn_i)
                begin
                    if ((ahbl_hresetn_i == 1'b0)) 
                        begin
                            err_sm_r <=  ERR_NORMAL_MODE ;
                        end
                    else
                        begin
                            err_sm_r <=  err_sm_nxt_r ;
                        end
                end
            // HREADY signal 
            always
                @(posedge ahbl_hclk_i)
                begin
                    if ((ahbl_hresetn_i == 1'b0)) 
                        begin
                            ahbl_hreadyout_r <=  1'b1 ;
                            ahbl_hreadyout_ext_r <=  1'b1 ;
                        end
                    else
                        begin
                            ahbl_hreadyout_r <=  ahbl_hreadyout_nxt_r ;
                            ahbl_hreadyout_ext_r <=  ahbl_hreadyout_nxt_r ;
                        end
                end
            // HRESP signal 
            always
                @(posedge ahbl_hclk_i or 
                    negedge ahbl_hresetn_i)
                begin
                    if ((ahbl_hresetn_i == 1'b0)) 
                        begin
                            ahbl_hresp_r <=  1'b0 ;
                        end
                    else
                        begin
                            ahbl_hresp_r <=  ahbl_hresp_nxt_r ;
                        end
                end
        end
    //------------------------------------------------------------------------------
    // Function Definition
    //------------------------------------------------------------------------------
    function [31:0] clog2 ; 
        input [31:0] value ; 
        reg [31:0] num ; 
        begin
            num = (value - 1) ;
            for (clog2 = 0 ; (num > 0) ; clog2 = (clog2 + 1))
                num = (num >> 1) ;
        end
    endfunction
endmodule



`timescale 1ns/1ps
module sysmem0_ipgen_lscc_fifo_streamer #(parameter ADDR_DEPTH = 16384, 
        parameter ADDR_WIDTH = clog2(ADDR_DEPTH), 
        parameter FIFO_START = 0, 
        parameter DATA_WIDTH = 32, 
        parameter BYTE_WIDTH = (DATA_WIDTH / 8), 
        parameter MEM_TYPE = "EBR") (
    input fifo_clk_i, 
    input fifo_wr_en_i, 
    input [7:0] fifo_wr_data_i, 
    input fifo_rst_i, 
    output reg fifo_full_o, 
    output [(DATA_WIDTH - 1):0] mem_wdata_o, 
    output mem_clk_en_o, 
    output [(ADDR_WIDTH - 1):0] mem_addr_o, 
    output [(BYTE_WIDTH - 1):0] mem_byte_en_o) ;
    reg fifo_full_int_r ; 
    reg [ADDR_WIDTH:0] mem_addr_r ; 
    reg [ADDR_WIDTH:0] mem_addr_nxt_c ; 
    reg fifo_full_nxt_c ; 
    reg [(BYTE_WIDTH - 1):0] mem_byte_en_r ; 
    reg [(BYTE_WIDTH - 1):0] mem_byte_en_nxt_c ; 
    assign mem_addr_o = mem_addr_r[(ADDR_WIDTH - 1):0] ; 
    assign mem_wdata_o = {BYTE_WIDTH{fifo_wr_data_i}} ; 
    assign mem_clk_en_o = ((~fifo_full_int_r) & fifo_wr_en_i) ; 
    if ((MEM_TYPE == "LRAM")) 
        begin : genblk1
            genvar i0 ; 
            for (i0 = 0;(i0 < BYTE_WIDTH);i0 = (i0 + 1))
            begin : genblk1
                assign mem_byte_en_o[i0] = (~mem_byte_en_r[i0]) ; 
            end
        end
    else
        begin : genblk1
            assign mem_byte_en_o = mem_byte_en_r ; 
        end
    if ((BYTE_WIDTH == 1)) 
        begin : genblk2
            always
                @(*)
                begin
                    mem_addr_nxt_c = mem_addr_r ;
                    if (mem_clk_en_o) 
                        begin
                            mem_addr_nxt_c = (mem_addr_r + 1'b1) ;
                        end
                end
            always
                @(*)
                begin
                    mem_byte_en_nxt_c = 1'b1 ;
                end
        end
    else
        begin : genblk2
            always
                @(*)
                begin
                    mem_addr_nxt_c = mem_addr_r ;
                    if ((mem_clk_en_o & mem_byte_en_r[(BYTE_WIDTH - 1)])) 
                        begin
                            mem_addr_nxt_c = (mem_addr_r + 1'b1) ;
                        end
                end
            always
                @(*)
                begin
                    mem_byte_en_nxt_c = (mem_clk_en_o ? {mem_byte_en_r[(BYTE_WIDTH - 2):0],
                            mem_byte_en_r[(BYTE_WIDTH - 1)]} : mem_byte_en_r) ;
                end
        end
    always
        @(*)
        begin
            fifo_full_nxt_c = (fifo_full_int_r | (fifo_wr_en_i && (mem_addr_nxt_c == ADDR_DEPTH))) ;
        end
    always
        @(posedge fifo_clk_i or 
            negedge fifo_rst_i)
        begin
            if ((~fifo_rst_i)) 
                begin
                    mem_addr_r <=  FIFO_START ;
                    mem_byte_en_r <=  4'h1 ;
                    fifo_full_o <=  1'b0 ;
                    fifo_full_int_r <=  1'b0 ;
                end
            else
                begin
                    mem_addr_r <=  mem_addr_nxt_c ;
                    mem_byte_en_r <=  mem_byte_en_nxt_c ;
                    fifo_full_o <=  fifo_full_nxt_c ;
                    fifo_full_int_r <=  fifo_full_nxt_c ;
                end
        end
    //------------------------------------------------------------------------------
    // Function Definition
    //------------------------------------------------------------------------------
    function [31:0] clog2 ; 
        input [31:0] value ; 
        reg [31:0] num ; 
        begin
            num = (value - 1) ;
            for (clog2 = 0 ; (num > 0) ; clog2 = (clog2 + 1))
                num = (num >> 1) ;
        end
    endfunction
endmodule


module sysmem0_ipgen_lscc_sys_mem #(
	    parameter SIM = 0,
	    parameter ADDR_DEPTH = 16384, 
        parameter DATA_WIDTH = 32, 
        parameter MEMORY_TYPE = "LRAM", 
        parameter PORT_COUNT = 2, 
        parameter ECC_ENABLE = 0, 
        parameter REGMODE_S0 = "noreg", 
        parameter REGMODE_S1 = "noreg", 
        parameter RESET_MODE_S0 = "async", 
        parameter RESET_MODE_S1 = "async", 
        parameter BYTE_ENABLE_S0 = 0, 
        parameter BYTE_ENABLE_S1 = 0, 
        parameter S0_START_ADDR = 0, 
        parameter S1_START_ADDR = 0, 
        parameter S0_END_ADDR = (ADDR_DEPTH - 1), 
        parameter S1_END_ADDR = (ADDR_DEPTH - 1), 
        parameter ACCESS_TYPE_S0 = "R/W", 
        parameter ACCESS_TYPE_S1 = "R/W", 
        parameter UNALIGNED_ACCESS_EN_S0 = 0, 
        parameter UNALIGNED_ACCESS_EN_S1 = 0, 
        parameter SHIFT_DIRECTION_S0 = "none", 
        parameter SHIFT_DIRECTION_S1 = "none", 
        parameter FAMILY = "common", 
        parameter ARBITER_EN = 0, 
        parameter MEM_SIZE = "1024,18", 
        parameter MEM_ID = "MEM0", 
        parameter FIFO_STREAMER_EN = 0, 
        parameter FIFO_START_ADDR = 0) (
    // -----------------------------------------------------------------------------
    // Module Parameters
    // -----------------------------------------------------------------------------
    // ------------------------------------------------------------------------------
    // Input/Output Ports
    // ------------------------------------------------------------------------------
    input ahbl_hclk_i, 
    input ahbl_hresetn_i, 
    // ----------------------------
    // AHB-Lite Master Interface 0
    // ----------------------------
    input ahbl_s0_hsel_i, 
    input ahbl_s0_hready_i, 
    input [31:0] ahbl_s0_haddr_i, 
    input [2:0] ahbl_s0_hburst_i, 
    input [2:0] ahbl_s0_hsize_i, 
    input ahbl_s0_hmastlock_i, 
    input [3:0] ahbl_s0_hprot_i, 
    input [1:0] ahbl_s0_htrans_i, 
    input ahbl_s0_hwrite_i, 
    input [(DATA_WIDTH - 1):0] ahbl_s0_hwdata_i, 
    output wire ahbl_s0_hreadyout_o, 
    output wire ahbl_s0_hresp_o, 
    output wire [(DATA_WIDTH - 1):0] ahbl_s0_hrdata_o, 
    output wire ecc_sec_s0_o, 
    output wire ecc_ded_s0_o, 
    // ----------------------------
    // AHB-Lite Master Interface 1
    // ----------------------------
    input ahbl_s1_hsel_i, 
    input ahbl_s1_hready_i, 
    input [31:0] ahbl_s1_haddr_i, 
    input [2:0] ahbl_s1_hburst_i, 
    input [2:0] ahbl_s1_hsize_i, 
    input ahbl_s1_hmastlock_i, 
    input [3:0] ahbl_s1_hprot_i, 
    input [1:0] ahbl_s1_htrans_i, 
    input ahbl_s1_hwrite_i, 
    input [(DATA_WIDTH - 1):0] ahbl_s1_hwdata_i, 
    output wire ahbl_s1_hreadyout_o, 
    output wire ahbl_s1_hresp_o, 
    output wire [(DATA_WIDTH - 1):0] ahbl_s1_hrdata_o, 
    output wire ecc_sec_s1_o, 
    output wire ecc_ded_s1_o, 
    // ----------------------------
    // FIFO Interface
    // ----------------------------
    input fifo_clk_i, 
    input fifo_wr_en_i, 
    input [7:0] fifo_wr_data_i, 
    input fifo_interface_en_i, 
    input fifo_address_rst_i, 
    output fifo_full_o) ;
    localparam ADDR_WIDTH = clog2(ADDR_DEPTH) ; 
    localparam BYTE_WIDTH = (DATA_WIDTH / 8) ; 
    localparam ADDR_WIDTH_S0_TAKE = clog2((S0_END_ADDR - S0_START_ADDR)) ; 
    localparam ADDR_WIDTH_S1_TAKE = clog2((S1_END_ADDR - S1_START_ADDR)) ; 
    localparam T_FAMILY = ((((FAMILY == "LFD2NX") || (FAMILY == "LFMNX")) || (FAMILY == "jd5r00")) ? "LIFCL" : FAMILY) ; 
    localparam T_BYTE_S0_EN = (FIFO_STREAMER_EN ? 1 : (ECC_ENABLE ? 0 : BYTE_ENABLE_S0)) ; 
    localparam T_BYTE_S1_EN = (FIFO_STREAMER_EN ? 1 : (ECC_ENABLE ? 0 : BYTE_ENABLE_S1)) ; 
    localparam T_ACCESS_TYPE_S1 = (FIFO_STREAMER_EN ? ((ACCESS_TYPE_S1 == "DISABLED") ? "W/O" : ((ACCESS_TYPE_S1 == "R/O") ? "R/W" : ACCESS_TYPE_S1)) : ACCESS_TYPE_S1) ; 
    wire sys_clk_w ; 
    // ------------------           
    // Memory 0 Interface           
    // ------------------           
    wire [(DATA_WIDTH - 1):0] mem0_rdata_w ; 
    wire mem0_error_w = 1'b1 ; 
    wire mem0_request_w ; 
    wire mem0_req_arb_w ; 
    wire mem0_wr_rdn_w ; 
    wire mem0_wr_rdn_arb_w ; 
    wire [(ADDR_WIDTH - 1):0] mem0_addr_w ; 
    wire [(DATA_WIDTH - 1):0] mem0_wdata_w ; 
    wire [(BYTE_WIDTH - 1):0] mem0_byte_en_w ; 
    // ------------------ 
    // Memory 1 Interface 
    // ------------------ 
    wire mem1_request_w ; 
    wire mem1_req_arb_w ; 
    wire mem1_wr_rdn_w ; 
    wire mem1_wr_rdn_arb_w ; 
    wire [(ADDR_WIDTH - 1):0] mem1_addr_w ; 
    wire [(DATA_WIDTH - 1):0] mem1_wdata_w ; 
    wire [(BYTE_WIDTH - 1):0] mem1_byte_en_w ; 
    // ------------------ 
    // Memory 1 Interface 
    // ------------------ 
    wire [(DATA_WIDTH - 1):0] mem1_rdata_w ; 
    wire mem1_error_w = 1'b1 ; 
    wire mem1_ahbl_request_w ; 
    wire mem1_ahbl_wr_rdn_w ; 
    wire [(ADDR_WIDTH - 1):0] mem1_ahbl_addr_w ; 
    wire [(DATA_WIDTH - 1):0] mem1_ahbl_wdata_w ; 
    wire [(BYTE_WIDTH - 1):0] mem1_ahbl_byte_en_w ; 
    // ------------------ 
    // Memory FIFO Interface 
    // ------------------
    wire [(DATA_WIDTH - 1):0] mem_fifo_wdata_w ; 
    wire mem_fifo_clk_en_w ; 
    wire [(ADDR_WIDTH - 1):0] mem_fifo_addr_w ; 
    wire [(BYTE_WIDTH - 1):0] mem_fifo_byte_en_w ; 
    wire [31:0] t_ahbl_addr_s0_w = {{(32 - ADDR_WIDTH_S0_TAKE){1'b0}},
                ahbl_s0_haddr_i[(ADDR_WIDTH_S0_TAKE - 1):0]} ; 
    wire [31:0] t_ahbl_addr_s1_w = {{(32 - ADDR_WIDTH_S1_TAKE){1'b0}},
                ahbl_s1_haddr_i[(ADDR_WIDTH_S1_TAKE - 1):0]} ; 

    // ----------------------------
    // AHB-Lite Slave 0 Bridge
    // ----------------------------
    sysmem0_ipgen_lscc_ahblmem_slave #(.DATA_WIDTH(DATA_WIDTH),
            .ADDR_DEPTH(ADDR_DEPTH),
            .REG_MODE(REGMODE_S0),
            .BYTE_ENABLE(T_BYTE_S0_EN),
            .START_ADDR(S0_START_ADDR),
            .END_ADDR(S0_END_ADDR),
            .PORT_TYPE(ACCESS_TYPE_S0),
            .RESET_MODE(RESET_MODE_S0),
            .UNALIGNED_EN(UNALIGNED_ACCESS_EN_S0),
            .UNALIGNED_DIR(SHIFT_DIRECTION_S0),
            .MEMORY_TYPE(MEMORY_TYPE)) bridge_s0 (.ahbl_hclk_i(sys_clk_w), 
                .ahbl_hresetn_i(ahbl_hresetn_i), 
                // ------------------------   
            // AHB-Lite S0 Interface         
            // ------------------------   
            .ahbl_hsel_i(ahbl_s0_hsel_i), 
                .ahbl_hready_i(ahbl_s0_hready_i), 
                .ahbl_haddr_i(t_ahbl_addr_s0_w), 
                .ahbl_hburst_i(ahbl_s0_hburst_i), 
                .ahbl_hsize_i(ahbl_s0_hsize_i), 
                .ahbl_hmastlock_i(ahbl_s0_hmastlock_i), 
                .ahbl_hprot_i(ahbl_s0_hprot_i), 
                .ahbl_htrans_i(ahbl_s0_htrans_i), 
                .ahbl_hwrite_i(ahbl_s0_hwrite_i), 
                .ahbl_hwdata_i(ahbl_s0_hwdata_i), 
                .ahbl_hreadyout_o(ahbl_s0_hreadyout_o), 
                .ahbl_hresp_o(ahbl_s0_hresp_o), 
                .ahbl_hrdata_o(ahbl_s0_hrdata_o), 
                // ------------------------   
            // Memory S0 Interface           
            // ------------------------   
            .mem_rdata_i(mem0_rdata_w), 
                .mem_error_i(mem0_error_w), 
                .mem_request_o(mem0_request_w), 
                .mem_wr_rdn_o(mem0_wr_rdn_w), 
                .mem_addr_o(mem0_addr_w), 
                .mem_wdata_o(mem0_wdata_w), 
                .mem_byte_en_o(mem0_byte_en_w)) ; 
    generate
        if ((ACCESS_TYPE_S1 == "DISABLED")) 
            begin : genblk1
                assign ahbl_s1_hreadyout_o = 1'b1 ; 
                assign ahbl_s1_hresp_o = 1'b0 ; 
                assign ahbl_s1_hrdata_o = {DATA_WIDTH{1'b0}} ; 
            end
        if ((((ACCESS_TYPE_S1 == "R/W") || (ACCESS_TYPE_S1 == "W/O")) || (ACCESS_TYPE_S1 == "R/O"))) 
            begin : bridge_s1
                // ----------------------------
                // AHB-Lite Slave 1 Bridge
                // ----------------------------
                sysmem0_ipgen_lscc_ahblmem_slave #(.DATA_WIDTH(DATA_WIDTH),
                        .ADDR_DEPTH(ADDR_DEPTH),
                        .REG_MODE(REGMODE_S1),
                        .BYTE_ENABLE(T_BYTE_S1_EN),
                        .START_ADDR(S1_START_ADDR),
                        .END_ADDR(S1_END_ADDR),
                        .PORT_TYPE(ACCESS_TYPE_S1),
                        .RESET_MODE(RESET_MODE_S1),
                        .UNALIGNED_EN(UNALIGNED_ACCESS_EN_S1),
                        .UNALIGNED_DIR(SHIFT_DIRECTION_S1),
                        .MEMORY_TYPE(MEMORY_TYPE)) bridge_s1 (.ahbl_hclk_i(sys_clk_w), 
                            .ahbl_hresetn_i(ahbl_hresetn_i), 
                            // ------------------------   
                        // AHB-Lite S0 Interface         
                        // ------------------------   
                        .ahbl_hsel_i(ahbl_s1_hsel_i), 
                            .ahbl_hready_i(ahbl_s1_hready_i), 
                            .ahbl_haddr_i(t_ahbl_addr_s1_w), 
                            .ahbl_hburst_i(ahbl_s1_hburst_i), 
                            .ahbl_hsize_i(ahbl_s1_hsize_i), 
                            .ahbl_hmastlock_i(ahbl_s1_hmastlock_i), 
                            .ahbl_hprot_i(ahbl_s1_hprot_i), 
                            .ahbl_htrans_i(ahbl_s1_htrans_i), 
                            .ahbl_hwrite_i(ahbl_s1_hwrite_i), 
                            .ahbl_hwdata_i(ahbl_s1_hwdata_i), 
                            .ahbl_hreadyout_o(ahbl_s1_hreadyout_o), 
                            .ahbl_hresp_o(ahbl_s1_hresp_o), 
                            .ahbl_hrdata_o(ahbl_s1_hrdata_o), 
                            // ------------------------   
                        // Memory S0 Interface           
                        // ------------------------   
                        .mem_rdata_i(mem1_rdata_w), 
                            .mem_error_i(mem1_error_w), 
                            .mem_request_o(mem1_ahbl_request_w), 
                            .mem_wr_rdn_o(mem1_ahbl_wr_rdn_w), 
                            .mem_addr_o(mem1_ahbl_addr_w), 
                            .mem_wdata_o(mem1_ahbl_wdata_w), 
                            .mem_byte_en_o(mem1_ahbl_byte_en_w)) ; 
            end
    endgenerate
    if (FIFO_STREAMER_EN) 
        begin : _FIFO_EN
            wire fifo_rstn_w ; 
            assign fifo_rstn_w = (ahbl_hresetn_i | fifo_address_rst_i) ; 
            sysmem0_ipgen_lscc_fifo_streamer #(.ADDR_DEPTH(ADDR_DEPTH),
                    .FIFO_START(FIFO_START_ADDR),
                    .DATA_WIDTH(DATA_WIDTH),
                    .MEM_TYPE(MEMORY_TYPE)) u_fifo (.fifo_clk_i(sys_clk_w), 
                        .fifo_wr_en_i(fifo_wr_en_i), 
                        .fifo_wr_data_i(fifo_wr_data_i), 
                        .fifo_rst_i(fifo_rstn_w), 
                        .fifo_full_o(fifo_full_o), 
                        .mem_wdata_o(mem_fifo_wdata_w), 
                        .mem_clk_en_o(mem_fifo_clk_en_w), 
                        .mem_addr_o(mem_fifo_addr_w), 
                        .mem_byte_en_o(mem_fifo_byte_en_w)) ; 
            DCS dcs0 (.CLK0(ahbl_hclk_i), 
                        .CLK1(fifo_clk_i), 
                        .DCSOUT(sys_clk_w), 
                        .SEL(fifo_interface_en_i), 
                        .SELFORCE(1'b1)) ; 
            if ((ACCESS_TYPE_S1 == "DISABLED")) 
                begin : genblk1
                    assign mem1_request_w = (fifo_interface_en_i & mem_fifo_clk_en_w) ; 
                    assign mem1_wr_rdn_w = 1'b1 ; 
                    assign mem1_addr_w = mem_fifo_addr_w ; 
                    assign mem1_wdata_w = mem_fifo_wdata_w ; 
                    assign mem1_byte_en_w = mem_fifo_byte_en_w ; 
                end
            else
                begin : genblk1
                    assign mem1_request_w = (fifo_interface_en_i ? mem_fifo_clk_en_w : mem1_ahbl_request_w) ; 
                    assign mem1_wr_rdn_w = (fifo_interface_en_i | mem1_ahbl_wr_rdn_w) ; 
                    assign mem1_addr_w = (fifo_interface_en_i ? mem_fifo_addr_w : mem1_ahbl_addr_w) ; 
                    assign mem1_wdata_w = (fifo_interface_en_i ? mem_fifo_wdata_w : mem1_ahbl_wdata_w) ; 
                    assign mem1_byte_en_w = (fifo_interface_en_i ? mem_fifo_byte_en_w : mem1_ahbl_byte_en_w) ; 
                end
        end
    else
        begin : _FIFO_DIS
            assign sys_clk_w = ahbl_hclk_i ; 
            assign mem1_request_w = mem1_ahbl_request_w ; 
            assign mem1_wr_rdn_w = mem1_ahbl_wr_rdn_w ; 
            assign mem1_addr_w = mem1_ahbl_addr_w ; 
            assign mem1_wdata_w = mem1_ahbl_wdata_w ; 
            assign mem1_byte_en_w = mem1_ahbl_byte_en_w ; 
        end
    // ------------------------   
    // Core Memory           
    // ------------------------  wire   reset_w;
assign reset_w = ~ahbl_hresetn_i;

generate 
if (SIM==0) begin: IMPL
  eval_mem0 u_mem0(
    .clk_a_i    (sys_clk_w        ), 
    .clk_b_i    (sys_clk_w        ), 
    .rst_a_i    (reset_w          ), 
    .rst_b_i    (reset_w          ), 
    .clk_en_a_i (mem0_req_arb_w   ), 
    .clk_en_b_i (mem1_req_arb_w   ), 
    .wr_en_a_i  (mem0_wr_rdn_arb_w), 
    .wr_en_b_i  (mem1_wr_rdn_arb_w), 
    .wr_data_a_i(mem0_wdata_w     ), 
    .wr_data_b_i(mem1_wdata_w     ), 
    .addr_a_i   (mem0_addr_w      ), 
    .addr_b_i   (mem1_addr_w      ), 
    .ben_a_i    (mem0_byte_en_w   ), 
    .ben_b_i    (mem1_byte_en_w   ), 
    .rd_data_a_o(mem0_rdata_w     ), 
    .rd_data_b_o(mem1_rdata_w     ));
end
else begin : SIML
  eval_mem0_sim u_mem0(
    .clk_a_i    (sys_clk_w        ), 
    .clk_b_i    (sys_clk_w        ), 
    .rst_a_i    (reset_w          ), 
    .rst_b_i    (reset_w          ), 
    .clk_en_a_i (mem0_req_arb_w   ), 
    .clk_en_b_i (mem1_req_arb_w   ), 
    .wr_en_a_i  (mem0_wr_rdn_arb_w), 
    .wr_en_b_i  (mem1_wr_rdn_arb_w), 
    .wr_data_a_i(mem0_wdata_w     ), 
    .wr_data_b_i(mem1_wdata_w     ), 
    .addr_a_i   (mem0_addr_w      ), 
    .addr_b_i   (mem1_addr_w      ), 
    .ben_a_i    (mem0_byte_en_w   ), 
    .ben_b_i    (mem1_byte_en_w   ), 
    .rd_data_a_o(mem0_rdata_w     ), 
    .rd_data_b_o(mem1_rdata_w     ));
end
endgenerate
    
assign ecc_ded_s0_o = 'h0;
assign ecc_sec_s0_o = 'h0;
assign ecc_ded_s1_o = 'h0;
assign ecc_sec_s1_o = 'h0;
    // ------------------------   
    // Arbiter           
    // ------------------------ 
    sysmem0_ipgen_lscc_ahblmem_arbiter #(.PORT_TYPE_S0(ACCESS_TYPE_S0),
            .PORT_TYPE_S1(ACCESS_TYPE_S1),
            .ADDR_WIDTH(ADDR_WIDTH),
            .RESET_MODE((((RESET_MODE_S0 == "async") || (RESET_MODE_S1 == "async")) ? "async" : "sync")),
            .ARBITER_EN(ARBITER_EN)) u_arbiter (// Common Signal
            .clk_i(ahbl_hclk_i), 
                .rst_i(ahbl_hresetn_i), 
                // Memory 0 Signal
            .addr_s0_i(mem0_addr_w), 
                .mem_wr_rdn_s0_i(mem0_wr_rdn_w), 
                .mem_req_s0_i(mem0_request_w), 
                .mem_wr_rdn_s0_o(mem0_wr_rdn_arb_w), 
                .mem_req_s0_o(mem0_req_arb_w), 
                // Memory 1 Signal
            .addr_s1_i(mem1_addr_w), 
                .mem_wr_rdn_s1_i(mem1_wr_rdn_w), 
                .mem_req_s1_i(mem1_request_w), 
                .mem_wr_rdn_s1_o(mem1_wr_rdn_arb_w), 
                .mem_req_s1_o(mem1_req_arb_w)) ; 
    //------------------------------------------------------------------------------
    // Function Definition
    //------------------------------------------------------------------------------
    function [31:0] clog2 ; 
        input [31:0] value ; 
        reg [31:0] num ; 
        begin
            num = (value - 1) ;
            for (clog2 = 0 ; (num > 0) ; clog2 = (clog2 + 1))
                num = (num >> 1) ;
        end
    endfunction
endmodule


